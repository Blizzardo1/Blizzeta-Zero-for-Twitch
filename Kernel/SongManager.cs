using libspotifydotnet;
using System;
using System.IO;
using System.Net;
using System.Threading.Tasks;
using System.Xml;

namespace BlizzetaZero.Kernel
{
	public class SpotifyManager
	{
		private readonly uint[] g_appkey = {
			0x01, 0xB8, 0x09, 0xB5, 0xCC, 0xC1, 0x45, 0xF3, 0x95, 0x72, 0x54, 0x2A, 0x6C, 0x7A, 0x86, 0x0F,
			0x2F, 0x55, 0x6A, 0x9B, 0xE8, 0x7F, 0xC5, 0xC9, 0xB1, 0x41, 0x1B, 0x9C, 0x91, 0x91, 0xC0, 0x0A,
			0xBD, 0x53, 0xDB, 0x93, 0x8A, 0x7D, 0x5F, 0x04, 0x61, 0x9F, 0xA1, 0x32, 0x7C, 0xBB, 0x55, 0x0E,
			0xC0, 0x6A, 0x95, 0xF1, 0x0E, 0xA5, 0x9A, 0x30, 0xD4, 0xB2, 0xF4, 0x71, 0x10, 0x00, 0x3C, 0x26,
			0xD3, 0xD3, 0x49, 0x8E, 0xC4, 0xFD, 0x14, 0xC1, 0x79, 0xDC, 0x68, 0x39, 0x37, 0x88, 0xFC, 0x01,
			0x45, 0xCA, 0x11, 0x51, 0x03, 0x51, 0xAA, 0x06, 0x69, 0x15, 0x60, 0x6E, 0x13, 0x4D, 0xF5, 0x53,
			0x7E, 0xC7, 0xC3, 0x8C, 0x56, 0xD8, 0x1A, 0xD2, 0x27, 0x27, 0xDF, 0x0E, 0xFB, 0xA6, 0x2B, 0x41,
			0x52, 0x33, 0xBB, 0x88, 0xDE, 0x21, 0x34, 0xEA, 0x4F, 0x2F, 0x88, 0xE2, 0xE4, 0x0B, 0x44, 0xF0,
			0xC9, 0x33, 0xD2, 0xA8, 0xD0, 0xB9, 0xD4, 0x3B, 0x2E, 0x77, 0x9C, 0x93, 0x54, 0xD9, 0xD1, 0x37,
			0x78, 0x32, 0x9A, 0x5B, 0xD4, 0xC0, 0x06, 0x81, 0xE6, 0x5C, 0x90, 0x05, 0xED, 0xBB, 0x72, 0xFF,
			0x49, 0xA9, 0x9B, 0x09, 0xF7, 0xFC, 0xBF, 0xD3, 0x9D, 0xA3, 0x25, 0x0A, 0x35, 0x5E, 0xD5, 0xE9,
			0x5A, 0x3A, 0xED, 0x91, 0xFD, 0x5F, 0x0C, 0x04, 0x5C, 0xF0, 0x04, 0xF2, 0x80, 0x62, 0xDB, 0xC5,
			0xD5, 0x3E, 0x0B, 0xF5, 0x38, 0xF8, 0xEC, 0xD9, 0xFE, 0x6F, 0x5D, 0x82, 0x0B, 0x32, 0x4B, 0x3D,
			0x6C, 0xFB, 0xB2, 0xC9, 0xD4, 0x11, 0xC9, 0x2D, 0xAB, 0x49, 0xEF, 0x6D, 0xC1, 0x87, 0xB6, 0xF5,
			0xEA, 0xAF, 0x41, 0xF1, 0x16, 0x19, 0x99, 0xFE, 0x3A, 0xAA, 0xD6, 0xDD, 0x8B, 0xD1, 0x89, 0x42,
			0xF6, 0xC1, 0xE4, 0x73, 0x88, 0x3F, 0x82, 0x52, 0xD5, 0xA4, 0xA4, 0x79, 0x4C, 0x80, 0x9F, 0xCB,
			0x20, 0x74, 0x30, 0xD0, 0x68, 0x43, 0x8C, 0xB6, 0xAE, 0x20, 0x10, 0xE9, 0xB8, 0x74, 0xF1, 0xE9,
			0x45, 0x38, 0xDF, 0x61, 0x94, 0x34, 0xE8, 0xD8, 0x0D, 0x76, 0x46, 0xF8, 0x1F, 0xA7, 0x55, 0x5E,
			0x91, 0x84, 0x34, 0x39, 0xE6, 0xB0, 0x42, 0x6E, 0x38, 0x76, 0x51, 0xD6, 0x83, 0x7B, 0xD3, 0xF0,
			0x49, 0x8C, 0xA3, 0xF8, 0xB0, 0x93, 0xBF, 0x24, 0x47, 0x38, 0xF5, 0x91, 0xDA, 0x7F, 0x26, 0xC7,
			0x7A,
		};

		public SpotifyManager ( )
		{
		}

		public string GetNowPlaying ( )
		{
			libspotify.sp_session_callbacks calls = new libspotify.sp_session_callbacks ( );

			string np = "";

			IntPtr npd = libspotify.sp_track_name ( calls.metadata_updated );

			return np;
		}
	}

	// last.fm
	/// <summary>
	/// BROKEN
	/// </summary>
	public class LastFMSongManager
	{
		private StreamReader reader;
		private StreamWriter writer;
		private string song;
		private WebClient wc;

		private string rooturl = "http://ws.audioscrobbler.com";
		private string APIKey = "6aec8c36ebb8472756235747f82d3421";
		private string Secret = "a18e4679ec311c8066732b6a3b828d43";
		private string token;
		private string username = "Blizzardo1";

		public LastFMSongManager ( )
		{
			song = "currentSong.txt";
			if ( !File.Exists ( song ) )
				File.WriteAllText ( song, "" );
			//reader = new StreamReader ( song );
			writer = new StreamWriter ( song );
			token = string.Empty;
			wc = new WebClient ( );
		}

		private void authenticate ( )
		{
			XmlDocument xDoc = new XmlDocument ( );
			string url = string.Format ( "{0}/2.0/?method=auth.gettoken&api_key={1}", rooturl, APIKey );
			Stream tokStream = wc.OpenRead ( url );

			xDoc.Load ( tokStream );

			token = xDoc.SelectSingleNode ( "/lfm/token" ).InnerText;
			Console.WriteLine ( "Authenticated with {0}", token );
		}

		public void Listen ( )
		{
			authenticate ( );
			Task tsk = new Task ( new Action ( ( ) =>
			{
				while ( true )
				{
					string url = string.Format ( "{0}/2.0/?method=track.getInfo&api_key={1}&artist={2}&track={3}", rooturl, APIKey );
				}
			} ) );

			tsk.Start ( );
		}
	}
}